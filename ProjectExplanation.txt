In this project, you're using Flask as a web framework to handle HTTP requests (GET and POST)
 and to render HTML templates (such as login.html).
  Flask integrates Python logic with web development by linking Python functions to specific
   web pages and requests. Below is a step-by-step explanation of how the HTML and Python
    (Flask) files work together.

1. Project Setup:
Flask App (methods.py):
The Flask app is defined with routes to handle HTTP requests.
The app serves HTML forms and processes form submissions.
app.secret_key = 'my_secret_key' is used to secure session data in the app.
The users dictionary stores predefined username and password combinations for authentication.
2. HTML File (login.html):
The HTML page contains two forms:
A GET form.
A POST form.
Each form contains:
Two input fields (username and password).
A submit button.
1. GET Form:
html
Copy code
<form method="GET" action="{{ url_for('handle_get') }}">
    <input type="text" name="username" placeholder="username" required>
    <input type="password" name="password" placeholder="password" required>
    <button type="submit">Submit</button>
</form>
The form sends the input data via the URL (GET request). For example:
arduino
Copy code
http://127.0.0.1:5000/handle_get?username=imran&password=1234
The action="{{ url_for('handle_get') }}" dynamically creates a URL for the handle_get
 view function defined in the Flask app. Flask's url_for is used to generate URLs for 
 routes based on their function name.
2. POST Form:
html
Copy code
<form method="POST" action="{{ url_for('handle_post') }}">
    <input type="text" name="username" placeholder="username" required>
    <input type="password" name="password" placeholder="password" required>
    <button type="submit">Submit</button>
</form>
This form sends input data in the body of the request, hidden from the URL, making it 
more secure for sensitive information (like passwords).
The form is linked to the Flask function handle_post using the url_for('handle_post').
3. Flask Python Code (methods.py):
Now, let's go through how the backend (Python) processes the requests.

1. Rendering the HTML Form:
python
Copy code
@app.route('/')
def view_form():
    return render_template('login.html')
The root URL ('/') renders the HTML template login.html using render_template(). 
This loads the form when you visit the homepage (http://127.0.0.1:5000).
2. Handling GET Request:
python
Copy code
@app.route('/handle_get', methods=['GET'])
def handle_get():
    if request.method == 'GET':
        username = request.args['username']
        password = request.args['password']
        print(username, password)
        if username in users and users[username] == password:
            return '<h1>Welcome</h1>'
        else:
            return "<h1>Invalid Credentials</h1>"
    else:
        return render_template('login.html')
When the GET form is submitted, it sends the form data as query parameters (in the URL). 
Flask retrieves these values using request.args[].
Flask checks if the username exists in the users dictionary and if the password matches. 
If so, it displays a welcome message. If not, it returns an "Invalid Credentials" message.
This method exposes sensitive data like passwords in the URL, so GET requests are generally 
not preferred for login forms.
3. Handling POST Request:
python
Copy code
@app.route('/handle_post', methods=['POST'])
def handle_post():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        print(username, password)
        if username in users and users[username] == password:
            return '<h1>Welcome</h1>'
        else:
            return "<h1>Invalid Credentials</h1>"
    else:
        return render_template('login.html')
When the POST form is submitted, Flask retrieves the form data using request.form[].
The form data is passed in the request body, making it more secure than GET.
Similar to the GET method, Flask checks the credentials and responds accordingly.
4. How HTML and Python Files Work Together:
Initial Page Load:

When you visit the root URL (http://127.0.0.1:5000), Flask serves the login.html file
 by executing the view_form() function.
The HTML page has two forms, one for GET and one for POST.
Form Submission:

When you fill in the forms and click "Submit," the data is sent to Flask.
Depending on which form you used, the data is sent as a GET or POST request 
to the appropriate URL (/handle_get or /handle_post).
Flask processes the form data in handle_get() or handle_post() by 
validating the username and password.
Response:

After processing the data, Flask sends a response back to the browser. 
If the login is successful, the page will display "Welcome"; 
if the credentials are invalid, "Invalid Credentials" will be displayed.
Key Differences Between GET and POST:
GET:

Data is appended to the URL as query parameters.
Less secure as sensitive data is visible in the URL.
Typically used for non-sensitive data or search queries.
POST:

Data is sent in the request body.
More secure for handling sensitive data like passwords.
Preferred for login forms or data submission.
Let me know if you need any more clarification on this!